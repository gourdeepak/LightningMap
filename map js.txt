import { LightningElement, api, wire, track } from 'lwc';
import fetchEvent from '@salesforce/apex/GoogleMapController.fetchEvent';
import getPicklistValue from '@salesforce/apex/GoogleMapController.getPicklistValue';
import fetchVolunteerInRange from '@salesforce/apex/GoogleMapController.fetchVolunteerInRange';
import assignEventToCon from '@salesforce/apex/GoogleMapController.assignEventToCon';
import NoVolunteerfound from '@salesforce/label/c.No_Volunteer_found';
import confirmMessage from '@salesforce/label/c.Volunteer_Confirmation_Message';
import successMessage from '@salesforce/label/c.Success_Message';
import errorMessage from '@salesforce/label/c.Error_Message';

import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { updateRecord } from 'lightning/uiRecordApi';

export default class googleMapCmp extends LightningElement {
    @api recordId;
    @track isSpinnerVisible = false;
    @track event;
    @track volunteerList;
    @track woMapMarkers;
    @track zoom = 10;
    @track range;
    @track language;
    @track languageOptions;
    @track isShowTable;

    connectedCallback(){
        console.log('recordId---'+this.recordId);
        this.isSpinnerVisible = true;

        getPicklistValue({ objectApiName: 'Contact', fieldApiName: 'Language_Known__c' })
        .then(result => {
            this.languageOptions = JSON.parse(result).pickList;
          //  console.log('this.educationOptions------'+this.languageOptions);
        })
        .catch(error => {
         //   console.log('error picklist ------'+ JSON.stringify(error));
        })

        fetchEvent({eventId : this.recordId})
        .then(result => {
          //  console.log('result-------'+ JSON.stringify(result));
            var data = JSON.parse(result);
            this.event = data.objEvent;
            this.volunteerList = data.volunteerList;
          //  console.log('this.event------'+this.event);
          //  console.log('this.volunteerList ----- '+this.volunteerList);
            this.woMapMarkers = [
                {
                    
                    
                    location: {
                        Latitude: this.event.Event_Geolocation__Latitude__s,
                        Longitude: this.event.Event_Geolocation__Longitude__s,
                        
                     },
                    mapIcon: {
                        path: 'M256,32C167.67,32,96,96.51,96,176c0,128,160,304,160,304S416,304,416,176C416,96.51,344.33,32,256,32Zm0,224a64,64,0,1,1,64-64A64.07,64.07,0,0,1,256,256Z', 
                        fillColor: '#4287f5', 
                        fillOpacity: 1.5, 
                        strokeWeight: 1, 
                        scale: .1
                        },
                    title: this.event.Subject,
                    description:
                    
                    this.event.Location,
                }
            ];
          //  console.log('this.woMapMarkers--------'+this.woMapMarkers);
            this.center = {
                location: { Latitude: this.event.Event_Geolocation__Latitude__s, Longitude: this.event.Event_Geolocation__Longitude__s },
            };


            for(let i=0; i<this.volunteerList.length; i++){
                var marker = {
                    // location: {
                    //     Street: this.contactList[i].MailingStreet,
                    //     City: this.contactList[i].MailingCity,
                    //     Country: this.contactList[i].MailingCountry,
                    // },
                    location: {
                        Latitude: this.volunteerList[i].MailingLatitude,
                        Longitude: this.volunteerList[i].MailingLongitude,
                    },
                    
                    mapIcon: {
                    path: 'M320 64C320 99.35 291.3 128 256 128C220.7 128 192 99.35 192 64C192 28.65 220.7 0 256 0C291.3 0 320 28.65 320 64zM288 160C323.3 160 352 188.7 352 224V272C352 289.7 337.7 304 320 304H318.2L307.2 403.5C305.4 419.7 291.7 432 275.4 432H236.6C220.3 432 206.6 419.7 204.8 403.5L193.8 304H192C174.3 304 160 289.7 160 272V224C160 188.7 188.7 160 224 160H288zM63.27 414.7C60.09 416.3 57.47 417.8 55.33 419.2C51.7 421.6 51.72 426.4 55.34 428.8C64.15 434.6 78.48 440.6 98.33 446.1C137.7 456.1 193.5 464 256 464C318.5 464 374.3 456.1 413.7 446.1C433.5 440.6 447.9 434.6 456.7 428.8C460.3 426.4 460.3 421.6 456.7 419.2C454.5 417.8 451.9 416.3 448.7 414.7C433.4 406.1 409.9 399.8 379.7 394.2C366.6 391.8 358 379.3 360.4 366.3C362.8 353.3 375.3 344.6 388.3 347C420.8 352.9 449.2 361.2 470.3 371.8C480.8 377.1 490.6 383.5 498 391.4C505.6 399.5 512 410.5 512 424C512 445.4 496.5 460.1 482.9 469C468.2 478.6 448.6 486.3 426.4 492.4C381.8 504.7 321.6 512 256 512C190.4 512 130.2 504.7 85.57 492.4C63.44 486.3 43.79 478.6 29.12 469C15.46 460.1 0 445.4 0 424C0 410.5 6.376 399.5 13.96 391.4C21.44 383.5 31.24 377.1 41.72 371.8C62.75 361.2 91.24 352.9 123.7 347C136.7 344.6 149.2 353.3 151.6 366.3C153.1 379.3 145.4 391.8 132.3 394.2C102.1 399.8 78.57 406.1 63.27 414.7H63.27z',
                    fillColor: '#ed1909',
                    fillOpacity: 1,
                    strokeWeight: 1,
                    scale: .09,
                   
                    },

                    title: this.volunteerList[i].Name,
                    description:
                    this.volunteerList[i].Phone+ '<br/>'+
                    this.volunteerList[i].MailingStreet + ' '+ this.volunteerList[i].MailingCity + ' '+ this.volunteerList[i].MailingCountry,
                    
                }

              //  console.log('this.marker--------'+marker);
                this.woMapMarkers.push(marker);
             //   console.log('this.woMapMarkers  22--------'+this.woMapMarkers);
            }

            this.isSpinnerVisible = false;
        })
        .catch(error =>{
         //   console.log('error ------ '+JSON.stringify(error));
            this.isSpinnerVisible = false;
        })

    }

    get rangeOptions() {
        return [
            { label: '--None--', value: '' },
            { label: '1km', value: '1' },
            { label: '2km', value: '2' },
            { label: '3km', value: '3' },
            { label: '4km', value: '4' },
            { label: '5km', value: '5' },
            { label: '6km', value: '6' },
            { label: '7km', value: '7' },
            { label: '8km', value: '8' },
            { label: '9km', value: '9' },
            { label: '10km', value: '10' },
            { label: '11km', value: '11' },
            { label: '12km', value: '12' },
            { label: '13km', value: '13' },
            { label: '14km', value: '14' },
            { label: '15km', value: '15' },
        ];
    }

    // get educationOptions() {
    //     return [
    //         { label: '1km', value: '1' },
    //         { label: '2km', value: '2' },
    //         { label: '3km', value: '3' },
    //         { label: '4km', value: '4' },
    //         { label: '5km', value: '5' },
    //         { label: '6km', value: '6' },
    //         { label: '7km', value: '7' },
    //         { label: '8km', value: '8' },
    //         { label: '9km', value: '9' },
    //         { label: '10km', value: '10' },
    //         { label: '11km', value: '11' },
    //         { label: '12km', value: '12' },
    //         { label: '13km', value: '13' },
    //     ];
    // }


    handleRangeChange(event){
        
        this.range = event.target.value;
      //  console.log('this.range----'+this.range);
        if(this.range != ''){
        this.isSpinnerVisible = true;
        fetchVolunteerInRange({eventId : this.event.Id , range : this.range, language : this.language })
        .then(result => {
         //   console.log('result-------'+ JSON.stringify(result));
            
            var data = JSON.parse(result);
            this.event = data.objEvent;
            this.volunteerList = data.volunteerList;
          //  console.log('this.event------'+this.event);
          //  console.log('this.volunteerList ----- '+this.volunteerList);
            
            this.woMapMarkers = [
                {
                    
                    
                    location: {
                        Latitude: this.event.Event_Geolocation__Latitude__s,
                        Longitude: this.event.Event_Geolocation__Longitude__s,
                        
                     },
                    mapIcon: {
                        path: 'M256,32C167.67,32,96,96.51,96,176c0,128,160,304,160,304S416,304,416,176C416,96.51,344.33,32,256,32Zm0,224a64,64,0,1,1,64-64A64.07,64.07,0,0,1,256,256Z', 
                        fillColor: '#4287f5', 
                        fillOpacity: 1.5, 
                        strokeWeight: 1, 
                        scale: .1
                        },
                    title: this.event.Subject,
                    description:
                    
                    this.event.Location,
                }
            ];
          //  console.log('this.woMapMarkers--------'+this.woMapMarkers);
            this.center = {
                location: { Latitude: this.event.Event_Geolocation__Latitude__s, Longitude: this.event.Event_Geolocation__Longitude__s },
            };
            if( this.volunteerList.length > 0){
                this.isShowTable = true;
                //this.isShowMsg = false;
            }else{
                this.isShowTable = false;
                const event = new ShowToastEvent({
                    title: 'Error',
                    message: NoVolunteerfound,
                    variant: 'error'
                    
                });
                this.dispatchEvent(event);
            }

            for(let i=0; i<this.volunteerList.length; i++){
                var marker = {
                    // location: {
                    //     Street: this.contactList[i].MailingStreet,
                    //     City: this.contactList[i].MailingCity,
                    //     Country: this.contactList[i].MailingCountry,
                    // },
                    location: {
                        Latitude: this.volunteerList[i].MailingLatitude,
                        Longitude: this.volunteerList[i].MailingLongitude,
                    },
                    
                    mapIcon: {
                    path: 'M320 64C320 99.35 291.3 128 256 128C220.7 128 192 99.35 192 64C192 28.65 220.7 0 256 0C291.3 0 320 28.65 320 64zM288 160C323.3 160 352 188.7 352 224V272C352 289.7 337.7 304 320 304H318.2L307.2 403.5C305.4 419.7 291.7 432 275.4 432H236.6C220.3 432 206.6 419.7 204.8 403.5L193.8 304H192C174.3 304 160 289.7 160 272V224C160 188.7 188.7 160 224 160H288zM63.27 414.7C60.09 416.3 57.47 417.8 55.33 419.2C51.7 421.6 51.72 426.4 55.34 428.8C64.15 434.6 78.48 440.6 98.33 446.1C137.7 456.1 193.5 464 256 464C318.5 464 374.3 456.1 413.7 446.1C433.5 440.6 447.9 434.6 456.7 428.8C460.3 426.4 460.3 421.6 456.7 419.2C454.5 417.8 451.9 416.3 448.7 414.7C433.4 406.1 409.9 399.8 379.7 394.2C366.6 391.8 358 379.3 360.4 366.3C362.8 353.3 375.3 344.6 388.3 347C420.8 352.9 449.2 361.2 470.3 371.8C480.8 377.1 490.6 383.5 498 391.4C505.6 399.5 512 410.5 512 424C512 445.4 496.5 460.1 482.9 469C468.2 478.6 448.6 486.3 426.4 492.4C381.8 504.7 321.6 512 256 512C190.4 512 130.2 504.7 85.57 492.4C63.44 486.3 43.79 478.6 29.12 469C15.46 460.1 0 445.4 0 424C0 410.5 6.376 399.5 13.96 391.4C21.44 383.5 31.24 377.1 41.72 371.8C62.75 361.2 91.24 352.9 123.7 347C136.7 344.6 149.2 353.3 151.6 366.3C153.1 379.3 145.4 391.8 132.3 394.2C102.1 399.8 78.57 406.1 63.27 414.7H63.27z',
                    fillColor: '#ed1909',
                    fillOpacity: 1,
                    strokeWeight: 1,
                    scale: .09,
                   
                    },

                    title: this.volunteerList[i].Name,
                    description:
                    this.volunteerList[i].Phone+ '<br/>'+
                    this.volunteerList[i].MailingStreet + ' '+ this.volunteerList[i].MailingCity + ' '+ this.volunteerList[i].MailingCountry,
                    
                }

              //  console.log('this.marker--------'+marker);
                this.woMapMarkers.push(marker);
              //  console.log('this.woMapMarkers  22--------'+this.woMapMarkers);
            }
            
            this.isSpinnerVisible = false;
        })
        .catch(error =>{
          //  console.log('error ------ '+JSON.stringify(error));
            this.isSpinnerVisible = false;
        })
        }else{
            this.volunteerList = [];
            this.isShowTable = false;
        }
    }

    handleLanguageChange(event){
        this.isSpinnerVisible = true;
        this.language = event.target.value;
       // console.log('this.language ----- '+this.language);
        fetchVolunteerInRange({eventId : this.event.Id , range : this.range, language : this.language })
        .then(result => {
         //   console.log('result-------'+ JSON.stringify(result));
            var data = JSON.parse(result);
            this.event = data.objEvent;
            this.volunteerList = data.volunteerList;
         //   console.log('this.event language------'+this.event);
         //console.log('this.volunteerList langua length----- '+this.volunteerList.length);
           // console.log('this.volunteerList langua ----- '+this.volunteerList);
            this.woMapMarkers = [
                {
                    
                    
                    location: {
                        Latitude: this.event.Event_Geolocation__Latitude__s,
                        Longitude: this.event.Event_Geolocation__Longitude__s,
                        
                     },
                    mapIcon: {
                        path: 'M256,32C167.67,32,96,96.51,96,176c0,128,160,304,160,304S416,304,416,176C416,96.51,344.33,32,256,32Zm0,224a64,64,0,1,1,64-64A64.07,64.07,0,0,1,256,256Z', 
                        fillColor: '#4287f5', 
                        fillOpacity: 1.5, 
                        strokeWeight: 1, 
                        scale: .1
                        },
                    title: this.event.Subject,
                    description:
                    
                    this.event.Location,
                }
            ];
          //  console.log('this.woMapMarkers--------'+this.woMapMarkers);
            this.center = {
                location: { Latitude: this.event.Event_Geolocation__Latitude__s, Longitude: this.event.Event_Geolocation__Longitude__s },
            };

            if( this.volunteerList.length > 0){
                this.isShowTable = true;
                //this.isShowMsg = false;
            }else{
                this.isShowTable = false;
                const event = new ShowToastEvent({
                    title: 'Error',
                    message: NoVolunteerfound,
                    variant: 'error'
                    
                });
                this.dispatchEvent(event);
            }
            for(let i=0; i<this.volunteerList.length; i++){
                var marker = {
                    // location: {
                    //     Street: this.contactList[i].MailingStreet,
                    //     City: this.contactList[i].MailingCity,
                    //     Country: this.contactList[i].MailingCountry,
                    // },
                    location: {
                        Latitude: this.volunteerList[i].MailingLatitude,
                        Longitude: this.volunteerList[i].MailingLongitude,
                    },
                    
                    mapIcon: {
                    path: 'M320 64C320 99.35 291.3 128 256 128C220.7 128 192 99.35 192 64C192 28.65 220.7 0 256 0C291.3 0 320 28.65 320 64zM288 160C323.3 160 352 188.7 352 224V272C352 289.7 337.7 304 320 304H318.2L307.2 403.5C305.4 419.7 291.7 432 275.4 432H236.6C220.3 432 206.6 419.7 204.8 403.5L193.8 304H192C174.3 304 160 289.7 160 272V224C160 188.7 188.7 160 224 160H288zM63.27 414.7C60.09 416.3 57.47 417.8 55.33 419.2C51.7 421.6 51.72 426.4 55.34 428.8C64.15 434.6 78.48 440.6 98.33 446.1C137.7 456.1 193.5 464 256 464C318.5 464 374.3 456.1 413.7 446.1C433.5 440.6 447.9 434.6 456.7 428.8C460.3 426.4 460.3 421.6 456.7 419.2C454.5 417.8 451.9 416.3 448.7 414.7C433.4 406.1 409.9 399.8 379.7 394.2C366.6 391.8 358 379.3 360.4 366.3C362.8 353.3 375.3 344.6 388.3 347C420.8 352.9 449.2 361.2 470.3 371.8C480.8 377.1 490.6 383.5 498 391.4C505.6 399.5 512 410.5 512 424C512 445.4 496.5 460.1 482.9 469C468.2 478.6 448.6 486.3 426.4 492.4C381.8 504.7 321.6 512 256 512C190.4 512 130.2 504.7 85.57 492.4C63.44 486.3 43.79 478.6 29.12 469C15.46 460.1 0 445.4 0 424C0 410.5 6.376 399.5 13.96 391.4C21.44 383.5 31.24 377.1 41.72 371.8C62.75 361.2 91.24 352.9 123.7 347C136.7 344.6 149.2 353.3 151.6 366.3C153.1 379.3 145.4 391.8 132.3 394.2C102.1 399.8 78.57 406.1 63.27 414.7H63.27z',
                    fillColor: '#ed1909',
                    fillOpacity: 1,
                    strokeWeight: 1,
                    scale: .09,
                   
                    },

                    title: this.volunteerList[i].Name,
                    description:
                    this.volunteerList[i].Phone+ '<br/>'+
                    this.volunteerList[i].MailingStreet + ' '+ this.volunteerList[i].MailingCity + ' '+ this.volunteerList[i].MailingCountry,
                    
                }

              //  console.log('this.marker--------'+marker);
                this.woMapMarkers.push(marker);
              //  console.log('this.woMapMarkers  22--------'+this.woMapMarkers);
            }

            this.isSpinnerVisible = false;
        })
        .catch(error =>{
          //  console.log('error language------ '+JSON.stringify(error));
            this.isSpinnerVisible = false;
        })

    }
   // @track isAssignTrue;

    handleCheckboxClick(event){
        this.isSpinnerVisible = true;
        var objid = event.target.id;
      //  console.log('objid'+objid);
      //  console.log('isChecked----'+event.target.checked);
        if(event.target.checked){
            
        if( confirm(confirmMessage)){
            var objconId = objid.slice(0,18);
          //  console.log('rowId----'+objconId);
          //  console.log('this.event.Id--------'+this.event.Id);
            assignEventToCon({eventId : this.event.Id , conId : objconId})
            .then(result => {
              //  console.log('success data---'+result);
                const event = new ShowToastEvent({
                    title: 'Success',
                    message: successMessage,
                    variant: 'success'
                    
                });
                this.dispatchEvent(event);
                updateRecord({ fields: { Id: this.recordId }})
              //  console.log('success');
                this.isSpinnerVisible = false;
            })
            .catch(error => {
             //   console.log('error------'+JSON.stringify(error));
                    const event = new ShowToastEvent({
                    title: 'Error',
                    message: errorMessage,
                    variant: 'error'
                    
                });
                    this.dispatchEvent(event);
                })
                this.isSpinnerVisible = false;
            
            }else{
              //  console.log('canceled');
                this.isSpinnerVisible = false;
               }
        }else{
          //  console.log('checkbox in false now');
            this.isSpinnerVisible = false;
        }
    }

}